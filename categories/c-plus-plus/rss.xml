<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Aurora - C Plus Plus</title>
        <link>https://charmer.fun</link>
        <description>Sidere mens eadem mutato</description>
        <generator>Zola</generator>
        <language>zh</language>
        <atom:link href="https://charmer.fun/categories/c-plus-plus/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Mon, 07 Mar 2022 14:37:06 +0800</lastBuildDate>
        <item>
            <title>通过例子快速入门C++</title>
            <pubDate>Mon, 07 Mar 2022 14:37:06 +0800</pubDate>
            <link>https://charmer.fun/posts/a-quick-introduction-to-c-plus-plus/</link>
            <guid>https://charmer.fun/posts/a-quick-introduction-to-c-plus-plus/</guid>
            <description>&lt;p&gt;⚠️ 本文为阅读笔记，&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;http:&#x2F;&#x2F;www.tfd.chalmers.se&#x2F;%7Ehani&#x2F;kurser&#x2F;OS_CFD_2007&#x2F;c++.pdf&quot;&gt;原文&lt;&#x2F;a&gt;为Tom Anderson对C++的&lt;strong&gt;子集&lt;&#x2F;strong&gt;的介绍。&lt;&#x2F;p&gt;
&lt;p&gt;在学习前需要解释的一点是，C++的内容可以划分为：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;基础部分，包含类、成员函数、构造器等等&lt;&#x2F;li&gt;
&lt;li&gt;进阶部分，包含单例继承、模版等等&lt;&#x2F;li&gt;
&lt;li&gt;垃圾部分，包含多重继承、异常、超载、引用等等&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;1是本文重点，每个C++程序员都应该掌握；2则是看到再查，但避免在自己的程序中使用；3则永远不要碰。&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;c-bao-han-c&quot;&gt;C++包含C&lt;&#x2F;h2&gt;
&lt;p&gt;很大程度上，C++是C的超集，大部分符合ANSI的C程序都可以被C++编译器编译。不过有以下几个地方需要注意：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;
&lt;p&gt;所有函数都要先声明后使用。（在C中使用未声明的函数默认返回值是int）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;所有函数的声明和定义头必须使用new-style声明，如&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;extern int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;（在C中可以&lt;code&gt;extern int foo();&lt;&#x2F;code&gt;表示函数foo未知的参数数量和类型）&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;需要链接C的对象文件时，需要这样声明C函数：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;extern &lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;C&amp;quot; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;foo&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;a&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;char&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;* &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;b&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;
&lt;p&gt;C++包含需要新关键词，不能被用作标识符（identifiers）。它们是：&lt;code&gt;new&lt;&#x2F;code&gt;，&lt;code&gt;delete&lt;&#x2F;code&gt;，&lt;code&gt;const&lt;&#x2F;code&gt;和&lt;code&gt;class&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;ji-chu-bu-fen&quot;&gt;基础部分&lt;&#x2F;h2&gt;
&lt;p&gt;在开始讲解之前，下面三组面对对象语言的通用概念必须了解：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;class&lt;&#x2F;strong&gt; and &lt;strong&gt;object&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;member functions&lt;&#x2F;strong&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;constructor&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;destructor&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;private&lt;&#x2F;strong&gt; vs. &lt;strong&gt;public&lt;&#x2F;strong&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;接下来用例子描述C++中的各类基础特性。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;lei&quot;&gt;类&lt;&#x2F;h3&gt;
&lt;p&gt;为了直观展示C++中的类使用，将以栈类的代码实现为例子。&lt;&#x2F;p&gt;
&lt;p&gt;在C++中，类的定义和实现是分离的（有种特殊情况，后文提到）。通常，在&lt;code&gt;.h&lt;&#x2F;code&gt;头文件中存放类的定义，在&lt;code&gt;.cc&lt;&#x2F;code&gt;文件中存放类的成员函数实现。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; stack.h
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;class &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Stack &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; stack;            &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 1.1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;public&lt;&#x2F;span&gt;&lt;span&gt;:                    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 1.2
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Stack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sz&lt;&#x2F;span&gt;&lt;span&gt;);         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 1.3
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;~Stack&lt;&#x2F;span&gt;&lt;span&gt;();              &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 1.4
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;);  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 1.5
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;bool &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Full&lt;&#x2F;span&gt;&lt;span&gt;() &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;const &lt;&#x2F;span&gt;&lt;span&gt;{ &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;return &lt;&#x2F;span&gt;&lt;span&gt;(top &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;==&lt;&#x2F;span&gt;&lt;span&gt; size); };     &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 1.6
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt;:                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 7
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;private&lt;&#x2F;span&gt;&lt;span&gt;:                   &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 7
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; top;
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;int&lt;&#x2F;span&gt;&lt;span&gt; size;
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h4 id=&quot;cheng-yuan-han-shu&quot;&gt;成员函数&lt;&#x2F;h4&gt;
&lt;p&gt;在stack.h头文件中&lt;em&gt;1.1&lt;&#x2F;em&gt;就是&lt;code&gt;Stack&lt;&#x2F;code&gt;类的普通成员函数。我们给出它的实现：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; stack.cc
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void
&lt;&#x2F;span&gt;&lt;span&gt;Stack::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Push&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;value&lt;&#x2F;span&gt;&lt;span&gt;) {         &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 2.1
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;ASSERT(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;!&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;this-&amp;gt;Full())&lt;&#x2F;span&gt;&lt;span&gt;;       &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 2.2
&lt;&#x2F;span&gt;&lt;span&gt;    stack[&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;this&lt;&#x2F;span&gt;&lt;span&gt;-&amp;gt;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;top&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;++&lt;&#x2F;span&gt;&lt;span&gt;] &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; value;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 2.3
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;首先看到&lt;em&gt;2.1&lt;&#x2F;em&gt;，&lt;em&gt;class::function&lt;&#x2F;em&gt;的标识符表明&lt;code&gt;Push&lt;&#x2F;code&gt;是类的成员函数。&lt;&#x2F;p&gt;
&lt;p&gt;在&lt;em&gt;2.2&lt;&#x2F;em&gt;中，成员函数体内可以直接使用对象的成员，这里访问了&lt;code&gt;Full()&lt;&#x2F;code&gt;函数。C++可以通过&lt;code&gt;-&amp;gt;&lt;&#x2F;code&gt;操作符访问对象的成员，同时，在成员函数内可以通过&lt;code&gt;this&lt;&#x2F;code&gt;变量指代当前对象，通常&lt;code&gt;this&lt;&#x2F;code&gt;是隐式的，因此可以改写成&lt;code&gt;ASSERT(!Full());&lt;&#x2F;code&gt;，&lt;em&gt;2.3&lt;&#x2F;em&gt;即是隐式调用对象成员。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;si-you-cheng-yuan&quot;&gt;私有成员&lt;&#x2F;h4&gt;
&lt;p&gt;面对对象编程自然必须涉及封装。C++提供了私有成员的方式实现封装。默认情况下C++类成员为私有成员，如&lt;em&gt;1.1&lt;&#x2F;em&gt;就是私有的，成员函数内可以随意使用，但外部不可见。&lt;&#x2F;p&gt;
&lt;p&gt;可以显示使用&lt;code&gt;public&lt;&#x2F;code&gt;关键词表明后续成员为公有成员，如&lt;em&gt;1.2&lt;&#x2F;em&gt;所示。&lt;&#x2F;p&gt;
&lt;p&gt;对之对应，可以使用&lt;code&gt;private&lt;&#x2F;code&gt;关键词表明后续成员为私有成员。&lt;&#x2F;p&gt;
&lt;p&gt;❤️ 所有包含数据的成员变量都应当私有。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;gou-zao-han-shu-he-newcao-zuo-fu&quot;&gt;构造函数和new操作符&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; stack.cc
&lt;&#x2F;span&gt;&lt;span&gt;Stack::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Stack&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;int &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;sz&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;    size &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;=&lt;&#x2F;span&gt;&lt;span&gt; sz;
&lt;&#x2F;span&gt;&lt;span&gt;    top &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;0&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;    stack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;new int&lt;&#x2F;span&gt;&lt;span&gt;[size];  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 3.1
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;&lt;em&gt;1.3&lt;&#x2F;em&gt;即是Stack类的构造函数，构造函数用于给对象成员赋予默认值，并进行一些初始化操作。在C++中，使用&lt;code&gt;new&lt;&#x2F;code&gt;关键词进行对象创建，它会自动调用类的构造函数。这个流程同样适用于自动变量。&lt;&#x2F;p&gt;
&lt;p&gt;对于类来说构造函数是必须的，若没有显示定义，编译器会给你加上一个空构造函数。&lt;&#x2F;p&gt;
&lt;p&gt;有两种方式传递函数参数给构造函数：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;void
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;test&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 通过new关键词（堆上变量）
&lt;&#x2F;span&gt;&lt;span&gt;    Stack&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;*&lt;&#x2F;span&gt;&lt;span&gt; s1 &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;= &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;new &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;Stack(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 4.1
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 自动变量或全局变量（栈上变量）
&lt;&#x2F;span&gt;&lt;span&gt;    Stack &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;s2(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#d3869b;&quot;&gt;128&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;)&lt;&#x2F;span&gt;&lt;span&gt;;               &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 4.2
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;函数内的变量在函数返回时会自动释放，比如&lt;em&gt;4.2&lt;&#x2F;em&gt;定义的s2就会在test()函数返回时释放。但是通过new关键词创建的变量（如&lt;em&gt;4.1&lt;&#x2F;em&gt;)存储在堆（heap）上，即是函数返回仍然存在，必须手动delete。&lt;&#x2F;p&gt;
&lt;p&gt;new关键词也可以用来分配数组，如&lt;em&gt;3.1&lt;&#x2F;em&gt;所示。同样需要手动delete。&lt;&#x2F;p&gt;
&lt;h4 id=&quot;xi-gou-han-shu-he-deletecao-zuo-fu&quot;&gt;析构函数和delete操作符&lt;&#x2F;h4&gt;
&lt;pre data-lang=&quot;c++&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-c++ &quot;&gt;&lt;code class=&quot;language-c++&quot; data-lang=&quot;c++&quot;&gt;&lt;span&gt;Stack::&lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;~Stack&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;delete []&lt;&#x2F;span&gt;&lt;span&gt; stack;  &lt;&#x2F;span&gt;&lt;span style=&quot;font-style:italic;color:#928374;&quot;&gt;&#x2F;&#x2F; 5.1
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;有构造函数就有析构函数，就如有new就有delete。&lt;&#x2F;p&gt;
&lt;p&gt;对于new出来的对象，使用delete手动释放，如&lt;em&gt;4.1&lt;&#x2F;em&gt;的s1：&lt;code&gt;delete d1;&lt;&#x2F;code&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;对于new出来的数组，也使用delete手动释放，如&lt;em&gt;5.1&lt;&#x2F;em&gt;所示。注意中间的&lt;code&gt;[]&lt;&#x2F;code&gt;表明释放数组，而不是数组中单个变量。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;qi-ta-c-de-ji-chu-te-xing&quot;&gt;其他C++的基础特性&lt;&#x2F;h3&gt;
&lt;ol&gt;
&lt;li&gt;类可以作为数据类型使用。&lt;&#x2F;li&gt;
&lt;li&gt;事实上可以在类是声明时（头文件）内同时声明实现函数，如&lt;em&gt;1.6&lt;&#x2F;em&gt;所示。但通常要求函数体简单。这么做有两个好处：方便和性能。在类声明时实现的函数会被当作&lt;code&gt;inline&lt;&#x2F;code&gt;函数。&lt;&#x2F;li&gt;
&lt;li&gt;const关键词除了像C一样声明变量时使用，表示变量不可变，还可以用于函数声明，表明函数对数据只读而不会修改，如&lt;em&gt;1.6&lt;&#x2F;em&gt;。&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;cin&lt;&#x2F;code&gt;和&lt;code&gt;cout&lt;&#x2F;code&gt;对象是C++中的标准输入输出。使用&lt;code&gt;&amp;gt;&amp;gt;&lt;&#x2F;code&gt;和&lt;code&gt;&amp;lt;&amp;lt;&lt;&#x2F;code&gt;分别输入、输出。&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;jin-jie-bu-fen&quot;&gt;进阶部分&lt;&#x2F;h2&gt;
&lt;p&gt;这部分内容容易误用，但如果用得恰当可以大幅简化逻辑。&lt;&#x2F;p&gt;
&lt;p&gt;后面内容由于博主没有使用场景，暂时不学习。😛&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dan-li-ji-cheng&quot;&gt;（单例）继承&lt;&#x2F;h3&gt;
&lt;h3 id=&quot;mo-ban&quot;&gt;模版&lt;&#x2F;h3&gt;
&lt;h2 id=&quot;la-ji-bu-fen&quot;&gt;垃圾部分&lt;&#x2F;h2&gt;
</description>
        </item>
    </channel>
</rss>
