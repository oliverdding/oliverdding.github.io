<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Aurora - BloomFilter</title>
        <link>https://charmer.fun</link>
        <description>Sidere mens eadem mutato</description>
        <generator>Zola</generator>
        <language>zh</language>
        <atom:link href="https://charmer.fun/categories/bloomfilter/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Tue, 15 Feb 2022 14:00:16 +0800</lastBuildDate>
        <item>
            <title>可扩展布隆过滤器</title>
            <pubDate>Tue, 15 Feb 2022 14:00:16 +0800</pubDate>
            <link>https://charmer.fun/posts/bloom-filter-2/</link>
            <guid>https://charmer.fun/posts/bloom-filter-2/</guid>
            <description>&lt;h2 id=&quot;jie-shao&quot;&gt;介绍&lt;&#x2F;h2&gt;
&lt;p&gt;在上篇博文&lt;a href=&quot;&#x2F;posts&#x2F;bloom-filter-1&#x2F;&quot;&gt;基础布隆过滤器&lt;&#x2F;a&gt;中介绍了基础的bloom filter以及相关数学推导，最后给出了应用最佳实践。在文章最后提及基础布隆过滤器无法在保证false positive率的同时扩展存储，必须在使用前预估集合大小（n）。但是在很多情况下，集合大小无法预估，这就需要使用本篇介绍的布隆过滤器变体。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;bu-long-guo-lu-qi-bian-ti&quot;&gt;布隆过滤器变体&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;oliverdding&#x2F;imaw.io&#x2F;main&#x2F;variant_bloom_filter.drawio.svg&quot; alt=&quot;布隆过滤器变体&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;布隆过滤器变体由以下两部分构成：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;M位的位图：&lt;code&gt;bitmap&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;k个相互独立的hash函数：&lt;code&gt;h1, h2, ..., hk&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;p&gt;其中，M位的位图被k等分，每个slice长度为m，即$m=\frac{M}{k}$。&lt;&#x2F;p&gt;
&lt;p&gt;与基础布隆过滤器不同的是，每个hash函数独享自己对应的slice（而不是全部位图）。&lt;&#x2F;p&gt;
&lt;p&gt;这种变体提高了健壮性，并且支持并发处理。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-xue-tui-dao&quot;&gt;数学推导&lt;&#x2F;h3&gt;
&lt;p&gt;对于某个slice，插入1个元素后，某一个位被置1、置0的概率为$\frac{1}{m}$、$1-\frac{1}{m}$&lt;&#x2F;p&gt;
&lt;p&gt;当插入n个元素后，某一位被置0、置1的概率是$(1-\frac{1}{m})^n$、$1-(1-\frac{1}{m})^n$&lt;&#x2F;p&gt;
&lt;p&gt;同样使用自然对数e的计算公式$$\lim_{x \to \infty}{(1-\frac{1}{x})^{-x}}=e$$&lt;&#x2F;p&gt;
&lt;p&gt;插入n个元素后某一位被置1的概率可以简化为$$p\approx{}1-e^{-\frac{n}{m}}$$&lt;&#x2F;p&gt;
&lt;p&gt;于是得到$$n\approx{}-mln(1-p)$$&lt;&#x2F;p&gt;
&lt;p&gt;又由公式$M=km$和$P=p^k$，我们推导出$m=M\frac{ln(p)}{ln(P)}$，因此有$$n\approx{}M\frac{ln(p)ln(1-p)}{-ln(P)}$$&lt;&#x2F;p&gt;
&lt;p&gt;对于给定的纳伪率$P$和位图大小M，当$p=\frac{1}{2}$时n取到最大值，此时能容纳最多的元素。$p$代表一个slice的饱和程度，我们得知slice半饱和时最好，对于$p=\frac{1}{2}$我们可以简化上面的公式为$$n\approx{}M\frac{(ln(2)^2)}{\lvert{}ln(P)\rvert{}}$$&lt;&#x2F;p&gt;
&lt;p&gt;P是给定的纳伪率，因此对于这个布隆过滤器变体而言，可以容纳的元素数量n是和位图大小M呈线性关系。&lt;&#x2F;p&gt;
&lt;p&gt;最后由$P=p^k$和$p=\frac{1}{2}$我们推导出$$k=log_{2}\frac{1}{P}$$&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-yong&quot;&gt;应用&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;yi-zhi-n-he-p&quot;&gt;已知$n$和$P$&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;根据公式$k=\lceil{}log_{2}\frac{1}{P}\rceil{}$计算k的值&lt;&#x2F;li&gt;
&lt;li&gt;根据公式$m\approx{}\lceil{}\frac{n\lvert{}ln(P)\rvert{}}{kln^2(2)}\rceil{}$计算m的值&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;ke-kuo-zhan-de-bu-long-guo-lu-qi&quot;&gt;可扩展的布隆过滤器&lt;&#x2F;h2&gt;
&lt;p&gt;本篇介绍的可扩展布隆过滤器（Scalable Bloom Filter, SBF）基于前文提及的布隆过滤器变体，有两个关键部分：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;SBF由一个或多个布隆过滤器组成。&lt;&#x2F;li&gt;
&lt;li&gt;后续的布隆过滤器的纳伪率成等比数列缩小，以保证整体纳伪率保持在一个数值内。&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;可扩展布隆过滤器同样存在两个操作：插入、查询。&lt;&#x2F;p&gt;
&lt;p&gt;当插入时，从过滤器列表最后一个过滤器插入新元素，并在“满了”时扩展过滤器列表。&lt;&#x2F;p&gt;
&lt;p&gt;但查询时，从前往后依次查询，每个过滤器都返回不存在时，则表明元素不存在，否则返回存在。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;shu-xue-tui-dao-1&quot;&gt;数学推导&lt;&#x2F;h3&gt;
&lt;p&gt;SBF创建时只有一个布隆过滤器，$k_0$个slice，纳伪率为$P_0$。当这个过滤器满了，添加新的过滤器（$k_1$个slice，纳伪率为$P_1=P_{0}r$，且$0&amp;lt;r&amp;lt;1$）。&lt;&#x2F;p&gt;
&lt;p&gt;当SBF存在$l$个过滤器后，其纳伪率为$$P=1-\prod_{i=0}^{l-1}(1-P_{0}r^i)$$&lt;&#x2F;p&gt;
&lt;p&gt;由于有缩放公式$$1-\prod_{i}(1-P_i)\le{}\sum_{i}P_i$$&lt;&#x2F;p&gt;
&lt;p&gt;我们可以得到P的上限$$P\le{}\sum_{i=0}^{l-1}P_{0}r^{i}\le{}\lim_{l \to \infty}\sum_{i=0}^{l-1}P_{0}r^i$$&lt;&#x2F;p&gt;
&lt;p&gt;因此有$$P\le{}P_{0}\frac{1}{1-r}$$&lt;&#x2F;p&gt;
&lt;p&gt;每个过滤器的slice长度为$$k_{0}=log_{2}(P_{0}^{-1})$$，$$k_{i}=log_{2}(P_{i}^{-1})=k_{0}+ilog_{2}(r^{-1}) \tag{1}$$&lt;&#x2F;p&gt;
&lt;p&gt;为了保证每个k_i都是整数，我们自然会想让$r=\frac{1}{2}$，此时有$$k_i=k_0+i$$，意味着每添加一个过滤器都需要扩充一个slice。此时SBF的整体纳伪率为$$P\le{}2P_0=2^{1-k_0}$$&lt;&#x2F;p&gt;
&lt;p&gt;论文证明了如果$r\lt{}0.5$，尽管小量数据时使用空间大于$r=0.5$，随着空间增长空间使用反而更小。论文实验证明，r取0.8～0.9时为最佳。[1]&lt;&#x2F;p&gt;
&lt;p&gt;事实上，后续添加的过滤器的纳伪率$P_i$只要低于整体纳伪率，则可保证整体纳伪率不增加。因此$k_i$的选取可以更加灵活，而不局限于(1)的公式。由于$P_i$和$k_i$成反比，只要$k_i$选取大于(1)的值即可保证$P_i$小。这里为了简化我们可以使用等比数列。假设k的取值为$P_0, P_{0}r, P_{0}r^2,...,P_{0}r^{l-1}$，此时过滤器可以存储的变量数$n_i$大约为$$n_i\approx{}m_{0}s^{i}ln(2)$$，有$l$个过滤器的SBF可以存储约$(ln2)m_{0}\sum_{i=0}^{l-1}s^i$个元素。&lt;&#x2F;p&gt;
&lt;p&gt;论文证明对于缓慢增长的SBF可以考虑设置$s=2$，对于快速增长的过滤器可以设置$s=4$。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;ying-yong-1&quot;&gt;应用&lt;&#x2F;h3&gt;
&lt;h4 id=&quot;yi-zhi-p&quot;&gt;已知$P$&lt;&#x2F;h4&gt;
&lt;ol&gt;
&lt;li&gt;考虑使用$n=8192$构造初始布隆过滤器变体，计算获得$k_0$和m&lt;&#x2F;li&gt;
&lt;li&gt;对于每个后续的$P_i=0.9P_{i-1}$&lt;&#x2F;li&gt;
&lt;li&gt;对于每个后续的过滤器，$k_i=2k_{i-1}$或$k_i=4k_{i-1}$&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;[1]: Scalable Bloom Filters&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
        <item>
            <title>基础布隆过滤器</title>
            <pubDate>Wed, 09 Feb 2022 17:13:10 +0800</pubDate>
            <link>https://charmer.fun/posts/bloom-filter-1/</link>
            <guid>https://charmer.fun/posts/bloom-filter-1/</guid>
            <description>&lt;h2 id=&quot;jie-shao&quot;&gt;介绍&lt;&#x2F;h2&gt;
&lt;p&gt;布隆过滤器（Bloom Filter）用于判断某个元素是否在集合中的一个简单、高效、内存占用低的数据结构，它类似于哈希表，相比于后者，它存在false positive值，但显著地降低了内存占用。这种&lt;a href=&quot;&#x2F;categories&#x2F;probabilisticdatastructure&#x2F;&quot;&gt;概率性数据结构&lt;&#x2F;a&gt;值得体会，以退为进，&lt;em&gt;只要false positive控制在可以允许的范围&lt;&#x2F;em&gt;，资源消耗被大幅降低[4]。&lt;&#x2F;p&gt;
&lt;p&gt;使用布隆过滤器查找key时，返回值可能情况有两种：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;key&lt;strong&gt;不&lt;&#x2F;strong&gt;存在&lt;&#x2F;li&gt;
&lt;li&gt;key&lt;strong&gt;可能&lt;&#x2F;strong&gt;存在（存在、纳伪）&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;使用布隆过滤器原则：false positive影响可控。&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;h3 id=&quot;li-shi&quot;&gt;历史&lt;&#x2F;h3&gt;
&lt;p&gt;布隆过滤器于1970年代被Burton Bloom创造，在查询集合成员存在与否时一般考虑时间成本或空间成本，论文提出第三个优化方向：Allowable Fraction of Errors，也就是说允许一定的误判，来大幅降低空间占用[1]。之后一段时间布隆过滤器被广泛运用在数据库领域。&lt;&#x2F;p&gt;
&lt;p&gt;之后又有人提出利用布隆过滤器+共享缓存的方式大幅降低缓存服务器的带宽[2]，自此布隆过滤器在互联网中展现实力[3]。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yuan-li&quot;&gt;原理&lt;&#x2F;h3&gt;
&lt;p&gt;布隆过滤器由以下三部分构成：&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;n个key&lt;&#x2F;li&gt;
&lt;li&gt;m位的位图：&lt;code&gt;bitmap&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;li&gt;k个相互独立的hash函数：&lt;code&gt;h1, h2, ..., hk&lt;&#x2F;code&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;blockquote&gt;
&lt;p&gt;可以用$h_{i}(x)=MD5(x+i)$或者$h_{i}(x)=MD5(x|i)$实现k个无关hash函数&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;需要插入key时，对&lt;code&gt;key = a&lt;&#x2F;code&gt;时，经过k个hash函数后得到k个数&lt;code&gt;h1(a), h2(a), ..., hk(a)&lt;&#x2F;code&gt;，此时将&lt;code&gt;bitmap&lt;&#x2F;code&gt;中对应的位置1。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;oliverdding&#x2F;imaw.io&#x2F;main&#x2F;inserting-key-into-bloom-filter.drawio.svg&quot; alt=&quot;往布隆过滤器插入新key&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;p&gt;需要查询key时，同样经过k个hash函数得到k个体数，查询&lt;code&gt;bitmap&lt;&#x2F;code&gt;中对应位，若全为1，则key&lt;strong&gt;可能&lt;&#x2F;strong&gt;存在；若任意位为0，则&lt;strong&gt;一定不&lt;&#x2F;strong&gt;存在。（这里可以利用短路减少消耗，若出现0则直接返回不存在）&lt;&#x2F;p&gt;
&lt;p&gt;当key越来越多，&lt;code&gt;bitmap&lt;&#x2F;code&gt;中为1的位越多，对于某个不存在的key，k个hash函数得到的坐标对应&lt;code&gt;bitmap&lt;&#x2F;code&gt;中的值都为1的概率越大，此时就发生false positive。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;li-zi&quot;&gt;例子&lt;&#x2F;h3&gt;
&lt;p&gt;为了直观描述布隆过滤器如何加速查询的，我们用数据库场景来描述。&lt;&#x2F;p&gt;
&lt;p&gt;我们对表中某个字段建立bloom filter，假设有10位的bitmap如下所示：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;0&lt;&#x2F;th&gt;&lt;th&gt;1&lt;&#x2F;th&gt;&lt;th&gt;2&lt;&#x2F;th&gt;&lt;th&gt;3&lt;&#x2F;th&gt;&lt;th&gt;4&lt;&#x2F;th&gt;&lt;th&gt;5&lt;&#x2F;th&gt;&lt;th&gt;6&lt;&#x2F;th&gt;&lt;th&gt;7&lt;&#x2F;th&gt;&lt;th&gt;8&lt;&#x2F;th&gt;&lt;th&gt;9&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;我们使用Fnv和Murmur这两个hash函数。&lt;&#x2F;p&gt;
&lt;p&gt;首先插入字符串&lt;code&gt;hello&lt;&#x2F;code&gt;，计算&lt;code&gt;Fnv=6&lt;&#x2F;code&gt;，&lt;code&gt;Murmur=0&lt;&#x2F;code&gt;，于是bitmap如下所示：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;0&lt;&#x2F;th&gt;&lt;th&gt;1&lt;&#x2F;th&gt;&lt;th&gt;2&lt;&#x2F;th&gt;&lt;th&gt;3&lt;&#x2F;th&gt;&lt;th&gt;4&lt;&#x2F;th&gt;&lt;th&gt;5&lt;&#x2F;th&gt;&lt;th&gt;6&lt;&#x2F;th&gt;&lt;th&gt;7&lt;&#x2F;th&gt;&lt;th&gt;8&lt;&#x2F;th&gt;&lt;th&gt;9&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;接着插入字符串&lt;code&gt;world&lt;&#x2F;code&gt;，计算&lt;code&gt;Fnv=7&lt;&#x2F;code&gt;，&lt;code&gt;Murmur=1&lt;&#x2F;code&gt;，于是bitmap如下所示：&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;0&lt;&#x2F;th&gt;&lt;th&gt;1&lt;&#x2F;th&gt;&lt;th&gt;2&lt;&#x2F;th&gt;&lt;th&gt;3&lt;&#x2F;th&gt;&lt;th&gt;4&lt;&#x2F;th&gt;&lt;th&gt;5&lt;&#x2F;th&gt;&lt;th&gt;6&lt;&#x2F;th&gt;&lt;th&gt;7&lt;&#x2F;th&gt;&lt;th&gt;8&lt;&#x2F;th&gt;&lt;th&gt;9&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;1&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;td&gt;0&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
&lt;p&gt;此时我们查询&lt;code&gt;charmer&lt;&#x2F;code&gt;是否存在，计算&lt;code&gt;Fnv=12&lt;&#x2F;code&gt;，&lt;code&gt;Murmur=10&lt;&#x2F;code&gt;，bitmap中存在0，因此&lt;strong&gt;不存在&lt;&#x2F;strong&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;再查询&lt;code&gt;hello&lt;&#x2F;code&gt;是否存在，计算&lt;code&gt;Fnv=6&lt;&#x2F;code&gt;，&lt;code&gt;Murmur=0&lt;&#x2F;code&gt;，bitmap中都为1，因此&lt;strong&gt;可能存在&lt;&#x2F;strong&gt;，需要访问磁盘，得知真的存在。&lt;&#x2F;p&gt;
&lt;p&gt;再查询&lt;code&gt;zaslf&lt;&#x2F;code&gt;是否存在，计算&lt;code&gt;Fnv=7&lt;&#x2F;code&gt;，&lt;code&gt;Murmur=1&lt;&#x2F;code&gt;，bitmap都为1，因此&lt;strong&gt;可能存在&lt;&#x2F;strong&gt;，需要访问磁盘，得知它不存在。这次磁盘访问就是false positive带来的坏影响，多余的磁盘访问。&lt;&#x2F;p&gt;
&lt;p&gt;&lt;img src=&quot;https:&#x2F;&#x2F;raw.githubusercontent.com&#x2F;oliverdding&#x2F;imaw.io&#x2F;main&#x2F;bloom-filter-speed-up-answers.drawio.svg&quot; alt=&quot;布隆过滤器加速查询&quot; &#x2F;&gt;&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shu-xue-tui-dao&quot;&gt;数学推导&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;strong&gt;k取何值时，false positive发生概率最小，此时概率为？&lt;&#x2F;strong&gt;&lt;&#x2F;p&gt;
&lt;p&gt;由于hash函数“选择”&lt;code&gt;bitmap&lt;&#x2F;code&gt;的位置是随机的，因此对于长度为m的&lt;code&gt;bitmap&lt;&#x2F;code&gt;而言，插入一个值时某个位被置1、0的概率分别是$P(1) = \frac{1}{m}$、$P(0) = 1 - \frac{1}{m}$&lt;&#x2F;p&gt;
&lt;p&gt;当k个hash函数置位后，对于任意一个位，仍然是0的概率是$$P&#x27;(0)=P(0)^{k}=(1 - \frac{1}{m})^{k}$$&lt;&#x2F;p&gt;
&lt;p&gt;对于n个key插入后，对于任意一个位，仍然是0的概率是$$P&#x27;&#x27;(0)=P&#x27;(0)^{n}=(1 - \frac{1}{m})^{kn}$$&lt;&#x2F;p&gt;
&lt;p&gt;由于有自然对数e的计算公式$$\lim_{x \to \infty}{(1-\frac{1}{x})^{-x}}=e$$&lt;&#x2F;p&gt;
&lt;p&gt;我们可以&lt;strong&gt;近似&lt;&#x2F;strong&gt;计算$P&#x27;&#x27;(0)$得到$$P&#x27;&#x27;(0)=((1-\frac{1}{m})^{-m})^{-\frac{kn}{m}}\approx{}e^{-\frac{kn}{m}}$$&lt;&#x2F;p&gt;
&lt;p&gt;因此，对于任意一个位，其被置1的概率是$$P&#x27;&#x27;(1)=1-P&#x27;&#x27;(0)\approx{}1-e^{-\frac{kn}{m}}$$&lt;&#x2F;p&gt;
&lt;p&gt;当alse positive发生时，是指它的k个hash函数得到的位置都为1。由于k个hash函数相互独立，我们可以计算出alse positive的概率为$$\varepsilon=(1-(1-\frac{1}{m})^{kn})^{k}\approx{}(1-e^{-\frac{kn}{m}})^{k}$$&lt;&#x2F;p&gt;
&lt;p&gt;由于m、n是用户给定的值，唯一变量就是k，我们需要指定k的值去最小化alse positive概率。&lt;&#x2F;p&gt;
&lt;p&gt;令$p=e^{-\frac{kn}{m}}$以及自然对数公式，我们有$$\varepsilon=(1-p)^{k}=e^{kln(1-p)}$$&lt;&#x2F;p&gt;
&lt;p&gt;此时变更为最小的$g=kln(1-p)$&lt;&#x2F;p&gt;
&lt;p&gt;无中生有下得到$$g=kln{}(1-p)=-\frac{m}{n}ln(e^{-\frac{kn}{m}})ln(1-p)=-\frac{m}{n}ln(p)ln(1-p)$$&lt;&#x2F;p&gt;
&lt;p&gt;根据对称性原理得知当$p=\frac{1}{2}$时g取得最小，此时有$$k=\frac{m}{n}ln(2)$$&lt;&#x2F;p&gt;
&lt;p&gt;插入回$$\varepsilon=(1-p)^{k}$$得到alse positive的最小值为$$\varepsilon_{min}=(\frac{1}{2})^{k}\approx{}(0.6185)^{\frac{m}{n}}$$&lt;&#x2F;p&gt;
&lt;h2 id=&quot;ying-yong&quot;&gt;应用&lt;&#x2F;h2&gt;
&lt;p&gt;那么如何在项目中使用bloom filter呢？&lt;&#x2F;p&gt;
&lt;h3 id=&quot;yi-zhi-n-he-varepsilon&quot;&gt;已知$n$和$\varepsilon$&lt;&#x2F;h3&gt;
&lt;p&gt;$n$由系统输入决定，$\varepsilon$则是开发者平衡内存使用和性能的选择，因此可以通过传入这两个变量自动计算剩下的值。&lt;&#x2F;p&gt;
&lt;ol&gt;
&lt;li&gt;根据公式$m=\lceil{}-\frac{nln(\varepsilon)}{(ln(2))^2}\rceil$计算m的值&lt;&#x2F;li&gt;
&lt;li&gt;根据公式$k=\lceil{}-log_2(\varepsilon)\rceil$计算k的值&lt;&#x2F;li&gt;
&lt;&#x2F;ol&gt;
&lt;h2 id=&quot;que-xian&quot;&gt;缺陷&lt;&#x2F;h2&gt;
&lt;p&gt;基础bloom filter有着自己的局限性，因此出现了许多变种，它们为了特殊场景作出不同的定制，增加一定开销换取更多功能：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;无法删除元素：计数布隆过滤器&lt;&#x2F;li&gt;
&lt;li&gt;无法扩展：&lt;a href=&quot;&#x2F;posts&#x2F;bloom-filter-2&#x2F;&quot;&gt;可扩展布隆过滤器&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;h2 id=&quot;can-kao&quot;&gt;参考&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;[1]: Space&#x2F;Time Trade-offs in Hash Coding with Allowable Errors&lt;&#x2F;li&gt;
&lt;li&gt;[2]: Summary Cache: A Scalable Wide-Area Web Cache Sharing Protocol &lt;&#x2F;li&gt;
&lt;li&gt;[3]: Network Applications of Bloom Filters: A Survey&lt;&#x2F;li&gt;
&lt;li&gt;[4]: Bloom Filters by Example. https:&#x2F;&#x2F;llimllib.github.io&#x2F;bloomfilter-tutorial&#x2F;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
    </channel>
</rss>
