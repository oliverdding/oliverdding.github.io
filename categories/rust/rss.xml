<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:atom="http://www.w3.org/2005/Atom" version="2.0">
    <channel>
      <title>Aurora - Rust</title>
        <link>https://charmer.fun</link>
        <description>Sidere mens eadem mutato</description>
        <generator>Zola</generator>
        <language>zh</language>
        <atom:link href="https://charmer.fun/categories/rust/rss.xml" rel="self" type="application/rss+xml"/>
        <lastBuildDate>Wed, 09 Mar 2022 08:51:43 +0800</lastBuildDate>
        <item>
            <title>trait对象的静态分发与动态分发</title>
            <pubDate>Wed, 09 Mar 2022 08:51:43 +0800</pubDate>
            <link>https://charmer.fun/posts/rust-traits-and-trait-objects/</link>
            <guid>https://charmer.fun/posts/rust-traits-and-trait-objects/</guid>
            <description>&lt;p&gt;[rust by example]是这么定义trait的：&lt;&#x2F;p&gt;
&lt;blockquote&gt;
&lt;p&gt;A trait is a collection of methods defined for an unknown type: Self. They can access other methods declared in the same trait.&lt;&#x2F;p&gt;
&lt;&#x2F;blockquote&gt;
&lt;p&gt;自然，我们就会需要传递“实现了某个trait”的struct这种范型功能。在rust中，提供了&lt;em&gt;两种方式&lt;&#x2F;em&gt;来实现这种能力，先引入一个trait和两个struct用于讲解后面的内容。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Run &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Duck&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Duck &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Duck is running&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;struct &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Dog&lt;&#x2F;span&gt;&lt;span&gt;;
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;impl &lt;&#x2F;span&gt;&lt;span&gt;Run &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;for &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Dog &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt;    &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;) {
&lt;&#x2F;span&gt;&lt;span&gt;        &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;println!&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#b8bb26;&quot;&gt;&amp;quot;Dog is running&amp;quot;&lt;&#x2F;span&gt;&lt;span&gt;);
&lt;&#x2F;span&gt;&lt;span&gt;    }
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h2 id=&quot;jing-tai-fen-fa-he-dong-tai-fen-fa&quot;&gt;静态分发和动态分发&lt;&#x2F;h2&gt;
&lt;p&gt;首先引入分发(dispatch)：当代码涉及多态时，编译器需要某种机制去决定实际的调用关系。rust提供了两种分发机制，分别是静态分发(static dispatch)和动态分发(dynamic dispatch)。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;jing-tai-fen-fa&quot;&gt;静态分发&lt;&#x2F;h3&gt;
&lt;p&gt;静态分发其实就是编译期范型，所有静态分发在编译期间确定实际类型，Rustc会通过单态化(Monomorphization)将泛型函数展开。&lt;&#x2F;p&gt;
&lt;p&gt;而静态分发有两种形式：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;get_runnable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;runnable&lt;&#x2F;span&gt;&lt;span&gt;: T) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; T: Run {
&lt;&#x2F;span&gt;&lt;span&gt;    runnable.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;get_runnable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;runnable&lt;&#x2F;span&gt;&lt;span&gt;: impl Run) {
&lt;&#x2F;span&gt;&lt;span&gt;    runnable.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;两者在调用时都能通过&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;get_runnable&lt;&#x2F;span&gt;&lt;span&gt;(Dog {});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;方式调用，区别在于前者可以使用&lt;code&gt;turbo-fish&lt;&#x2F;code&gt;语法（也就是&lt;code&gt;::&amp;lt;&amp;gt;&lt;&#x2F;code&gt;操作符）：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span&gt;get_runnable::&amp;lt;Dog&amp;gt;(Dog {});
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;h3 id=&quot;dong-tai-fen-fa&quot;&gt;动态分发&lt;&#x2F;h3&gt;
&lt;p&gt;首先引入trait对象(trait object)的概念：trait对象是指实现了某组traits的非具体类型值，这组trait一定包含一个&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;items&#x2F;traits.html#object-safety&quot;&gt;对象安全（object safe）&lt;&#x2F;a&gt;的基trait，和一些&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;special-types-and-traits.html#auto-traits&quot;&gt;自动trait（auto trait）&lt;&#x2F;a&gt;。&lt;&#x2F;p&gt;
&lt;p&gt;在2021版本后，要求trait对象一定需要&lt;code&gt;dyn&lt;&#x2F;code&gt;关键字标识，以和trait本身区分开来。对于某个trait&lt;code&gt;Trait&lt;&#x2F;code&gt;，以下东西都是trait对象：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;dyn Trait&lt;&#x2F;li&gt;
&lt;li&gt;dyn Trait + Send&lt;&#x2F;li&gt;
&lt;li&gt;dyn Trait + Send + Sync&lt;&#x2F;li&gt;
&lt;li&gt;dyn Trait + &#x27;static&lt;&#x2F;li&gt;
&lt;li&gt;dyn Trait + Send + &#x27;static&lt;&#x2F;li&gt;
&lt;li&gt;dyn Trait +&lt;&#x2F;li&gt;
&lt;li&gt;dyn &#x27;static + Trait.&lt;&#x2F;li&gt;
&lt;li&gt;dyn (Trait)&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;动态分发也就是运行时范型，虽然trait对象是&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;dynamically-sized-types.html&quot;&gt;Dynamically Sized Types(DST, 也叫unsized types)&lt;&#x2F;a&gt;，意味着它的大小只有运行时可以确定，意味着rustc不会允许这样的代码通过编译：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;get_runnable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;runnable&lt;&#x2F;span&gt;&lt;span&gt;: dyn Run) {
&lt;&#x2F;span&gt;&lt;span&gt;    runnable.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;但是指向实现trait的struct的指针大小是一定的，因此可以把trait对象隐藏在指针后（如&lt;code&gt;&amp;amp;dyn Trait&lt;&#x2F;code&gt;，&lt;code&gt;Box&amp;lt;dyn Trait&amp;gt;&lt;&#x2F;code&gt;，&lt;code&gt;Rc&amp;lt;dyn Trait&amp;gt;&lt;&#x2F;code&gt;等），编译器编译时会默认对象实现了trait，并在运行时动态加载调用的对应函数。&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;get_runnable&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;runnable&lt;&#x2F;span&gt;&lt;span&gt;: &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span&gt;dyn Run) {
&lt;&#x2F;span&gt;&lt;span&gt;    runnable.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;动态分发靠的就是指向trait对象的指针。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;shi-xian-yuan-li&quot;&gt;实现原理&lt;&#x2F;h2&gt;
&lt;h3 id=&quot;jing-tai-fen-fa-1&quot;&gt;静态分发&lt;&#x2F;h3&gt;
&lt;p&gt;静态分发的实现原理比较简单，每多一种调用struct，rustc就会生成多一个函数：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;get_runnable&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;runnable&lt;&#x2F;span&gt;&lt;span&gt;: T) &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;where&lt;&#x2F;span&gt;&lt;span&gt; T: Run {
&lt;&#x2F;span&gt;&lt;span&gt;    runnable.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;();
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;main&lt;&#x2F;span&gt;&lt;span&gt;() {
&lt;&#x2F;span&gt;&lt;span&gt;    get_runnable::&amp;lt;Dog&amp;gt;(Dog {});
&lt;&#x2F;span&gt;&lt;span&gt;    get_runnable::&amp;lt;Duck&amp;gt;(Duck {});
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;通过编译后，&lt;code&gt;get_runnable&lt;&#x2F;code&gt;函数会生成两种：&lt;&#x2F;p&gt;
&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;get_runnable_for_dog&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;runnable&lt;&#x2F;span&gt;&lt;span&gt;: Dog) {
&lt;&#x2F;span&gt;&lt;span&gt;    runnable.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;span&gt;
&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;get_runnable_for_duck&lt;&#x2F;span&gt;&lt;span&gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;runnable&lt;&#x2F;span&gt;&lt;span&gt;: Duck) {
&lt;&#x2F;span&gt;&lt;span&gt;    runnable.&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fabd2f;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;()
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;p&gt;rustc会自动将类型与调用函数匹配。&lt;&#x2F;p&gt;
&lt;p&gt;显而易见的，通过静态分发实现的多态无运行时性能损耗，但是编译出的二进制文件大小增加。&lt;&#x2F;p&gt;
&lt;h3 id=&quot;dong-tai-fen-fa-1&quot;&gt;动态分发&lt;&#x2F;h3&gt;
&lt;p&gt;动态分发就略复杂了，实现的关键在指针，每个指向trait对象的指针包含：&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;指向实现某个trait实例的指针&lt;&#x2F;li&gt;
&lt;li&gt;虚拟函数列表(virtual method table, 一般直接叫vtable)，包含
&lt;ul&gt;
&lt;li&gt;某个trait和它父trait的所有函数&lt;&#x2F;li&gt;
&lt;li&gt;指向这个实例对函数列表内函数的实现的指针&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;使用trait对象的目的是对方法的“延迟绑定（late binding）”，调用trait对象的某个方法最终在运行时才分发，也就是说调用时先从vtable中载入函数指针，再间接调用这个函数。对于vtable中每一个函数的实现，每个trait对象都可以不一样。&lt;&#x2F;p&gt;
&lt;p&gt;其实rust中&lt;code&gt;str&lt;&#x2F;code&gt;字符串类型和&lt;code&gt;[T]&lt;&#x2F;code&gt;数组类型都是trait对象。&lt;&#x2F;p&gt;
&lt;h2 id=&quot;dui-xiang-an-quan&quot;&gt;对象安全&lt;&#x2F;h2&gt;
&lt;p&gt;trait对象一定要基于&lt;a rel=&quot;noopener nofollow noreferrer&quot; target=&quot;_blank&quot; href=&quot;https:&#x2F;&#x2F;doc.rust-lang.org&#x2F;reference&#x2F;items&#x2F;traits.html#object-safety&quot;&gt;对象安全&lt;&#x2F;a&gt;的trait，这里不大谈特谈，只简单提及两个有趣的地方。&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;code&gt;std::Sized&lt;&#x2F;code&gt;
&lt;ul&gt;
&lt;li&gt;当不希望trait被用为trait对象时，可以加上&lt;code&gt;Self: Sized&lt;&#x2F;code&gt;的约束&lt;&#x2F;li&gt;
&lt;li&gt;当不希望某个函数出现在trait对象的vtable中，可以加上&lt;code&gt;where Self: Sized&lt;&#x2F;code&gt;的约束&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;trait对象的可分发函数不能有类型（范型）参数，所以如果trait中存在范型参数，只能静态分发了&lt;pre data-lang=&quot;rust&quot; style=&quot;background-color:#282828;color:#fdf4c1aa;&quot; class=&quot;language-rust &quot;&gt;&lt;code class=&quot;language-rust&quot; data-lang=&quot;rust&quot;&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;trait &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;Run &lt;&#x2F;span&gt;&lt;span&gt;{
&lt;&#x2F;span&gt;&lt;span&gt; &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fa5c4b;&quot;&gt;fn &lt;&#x2F;span&gt;&lt;span style=&quot;color:#8ec07c;&quot;&gt;run&lt;&#x2F;span&gt;&lt;span&gt;&amp;lt;T&amp;gt;(&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fe8019;&quot;&gt;&amp;amp;&lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;self&lt;&#x2F;span&gt;&lt;span&gt;, &lt;&#x2F;span&gt;&lt;span style=&quot;color:#fdf4c1;&quot;&gt;t&lt;&#x2F;span&gt;&lt;span&gt;: T);
&lt;&#x2F;span&gt;&lt;span&gt;}
&lt;&#x2F;span&gt;&lt;&#x2F;code&gt;&lt;&#x2F;pre&gt;
&lt;&#x2F;li&gt;
&lt;li&gt;&lt;code&gt;Self&lt;&#x2F;code&gt;只能出现在方法的接受者（receiver）中，也就是方法的第一个参数，&lt;code&gt;&amp;amp;self&lt;&#x2F;code&gt;、&lt;code&gt;&amp;amp;mut self&lt;&#x2F;code&gt;...&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
</description>
        </item>
    </channel>
</rss>
